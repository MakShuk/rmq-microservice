import { Controller } from '@nestjs/common';
import { RMQRoute, RMQMessage } from 'nestjs-rmq';
import { ConsumeMessage } from 'amqplib';
import * as fs from 'fs';
import * as path from 'path';

@Controller()
export class AppController {
    private readonly logsDir = 'logs';

    constructor() {
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!fs.existsSync(this.logsDir)) {
            fs.mkdirSync(this.logsDir);
        }
    }

    private saveToJsonFile(messageInfo: any): void {
        // –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
        const currentDate = new Date();
        const dateStr = currentDate.toISOString().split('T')[0]; // –§–æ—Ä–º–∞—Ç: YYYY-MM-DD
        const fileName = path.join(this.logsDir, `messages_${dateStr}.json`);

        try {
            // –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–æ–≥–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤
            let existingLogs = [];
            if (fs.existsSync(fileName)) {
                const fileContent = fs.readFileSync(fileName, 'utf-8');
                existingLogs = JSON.parse(fileContent);
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ª–æ–≥–∞–º
            existingLogs.push(messageInfo);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –ª–æ–≥–æ–≤
            fs.writeFileSync(fileName, JSON.stringify(existingLogs, null, 2));
            console.log(`üìù –õ–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ñ–∞–π–ª: ${fileName}`);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–æ–≥–∞:', error);
        }
    }

    @RMQRoute('expired.queue')
    async getHello(
        payload: any,
        @RMQMessage message: ConsumeMessage,
    ): Promise<string> {
        const time = new Date().toISOString();
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
        const messageInfo = {
            timestamp: time,
            payload: payload,
            messageProperties: {
                messageId: message.properties.messageId,
                correlationId: message.properties.correlationId,
                timestamp: new Date(message.properties.timestamp).toISOString(),
                headers: message.properties.headers,
                contentType: message.properties.contentType,
                replyTo: message.properties.replyTo,
                expiration: message.properties.expiration,
            },
            exchange: message.fields.exchange,
            routingKey: message.fields.routingKey,
            queueName: 'expired.queue',
            consumerTag: message.fields.consumerTag,
            deliveryTag: message.fields.deliveryTag,
            deathInfo: {
                firstDeath: {
                    exchange: message.properties?.headers?.['x-first-death-exchange'] || '–Ω/–¥',
                    queue: message.properties?.headers?.['x-first-death-queue'] || '–Ω/–¥',
                    reason: message.properties?.headers?.['x-first-death-reason'] || '–Ω/–¥',
                },
                lastDeath: {
                    exchange: message.properties?.headers?.['x-last-death-exchange'] || '–Ω/–¥',
                    queue: message.properties?.headers?.['x-last-death-queue'] || '–Ω/–¥',
                    reason: message.properties?.headers?.['x-last-death-reason'] || '–Ω/–¥',
                }
            }
        };

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ JSON —Ñ–∞–π–ª
        this.saveToJsonFile(messageInfo);

        // –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
        console.log('\nüê∞ –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ RabbitMQ —Å–æ–æ–±—â–µ–Ω–∏–µ:');
        console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
        console.log('üìÖ –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è:', messageInfo.timestamp);
        console.log('üì¶ –ü–æ–ª–µ–∑–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞:', JSON.stringify(messageInfo.payload, null, 2));
        console.log('üìù –°–≤–æ–π—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:');
        console.log('   ‚Ä¢ ID —Å–æ–æ–±—â–µ–Ω–∏—è:', messageInfo.messageProperties.messageId);
        console.log('   ‚Ä¢ Correlation ID:', messageInfo.messageProperties.correlationId);
        console.log('   ‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞:', messageInfo.messageProperties.timestamp);
        console.log('   ‚Ä¢ –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', messageInfo.messageProperties.contentType);
        console.log('   ‚Ä¢ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:', messageInfo.messageProperties.expiration);
        console.log('üîÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏:');
        console.log('   ‚Ä¢ Exchange:', messageInfo.exchange);
        console.log('   ‚Ä¢ Routing Key:', messageInfo.routingKey);
        console.log('   ‚Ä¢ –û—á–µ—Ä–µ–¥—å:', messageInfo.queueName);
        console.log('   ‚Ä¢ Consumer Tag:', messageInfo.consumerTag);
        console.log('   ‚Ä¢ Delivery Tag:', messageInfo.deliveryTag);
        console.log('üíÄ –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:');
        console.log('   –ü–µ—Ä–≤–∞—è –∏—Å—Ç–µ—á–µ–Ω–∏–µ —Å—Ä–æ–∫–∞:');
        console.log('   ‚Ä¢ Exchange:', messageInfo.deathInfo.firstDeath.exchange);
        console.log('   ‚Ä¢ –û—á–µ—Ä–µ–¥—å:', messageInfo.deathInfo.firstDeath.queue);
        console.log('   ‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞:', messageInfo.deathInfo.firstDeath.reason);
        console.log('   –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏—Å—Ç–µ—á–µ–Ω–∏–µ —Å—Ä–æ–∫–∞:');
        console.log('   ‚Ä¢ Exchange:', messageInfo.deathInfo.lastDeath.exchange);
        console.log('   ‚Ä¢ –û—á–µ—Ä–µ–¥—å:', messageInfo.deathInfo.lastDeath.queue);
        console.log('   ‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞:', messageInfo.deathInfo.lastDeath.reason);
        console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');

        return `–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ ${time}`;
    }
}